:PROPERTIES:
:ID:       28ce86b0-9e31-4738-a264-6af43b3284dc
:NOTER_DOCUMENT: ~/library/Jon Erickson/Hacking_ The Art of Exploitation, 2nd Edition (754)/Hacking_ The Art of Exploitation, 2nd Edit - Jon Erickson.pdf
:NOTER_PAGE: 39
:END:
#+title: [Book] Hacking - the art of exploitation


* Table of contents :toc:
- [[#disassembled-c-code][Disassembled C code]]
- [[#objdump][objdump]]
- [[#assembly-syntax][assembly syntax]]
- [[#registers][registers]]
  - [[#register-types][Register types]]
- [[#intel-assembly-syntax][intel assembly syntax]]

* Disassembled C code
:PROPERTIES:
:NOTER_PAGE: 34
:END:


This code prints "Hello, world!" teen times.
#+begin_src C
#include <stdio.h>
int main()
{
  int i;
  for(i=0; i < 10; i++)
    {
      puts("Hello, world!\n");
    }
  return 0;
}
#+end_src

When dissasembled using ~objdump~, its binary representation is:

#+begin_src asm
0000000000001139 <main>:
    1139:	55                   	push   %rbp
    113a:	48 89 e5             	mov    %rsp,%rbp
    113d:	48 83 ec 10          	sub    $0x10,%rsp
    1141:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    1148:	eb 13                	jmp    115d <main+0x24>
    114a:	48 8d 05 b3 0e 00 00 	lea    0xeb3(%rip),%rax        # 2004 <_IO_stdin_used+0x4>
    1151:	48 89 c7             	mov    %rax,%rdi
    1154:	e8 d7 fe ff ff       	call   1030 <puts@plt>
    1159:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    115d:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)
    1161:	7e e7                	jle    114a <main+0x11>
    1163:	b8 00 00 00 00       	mov    $0x0,%eax
    1168:	c9                   	leave
    1169:	c3                   	ret
#+end_src

* objdump
:PROPERTIES:
:NOTER_PAGE: 35
:END:
~objdump~ program represents bytes of the executable file as hexadecimal digits, ex. 55_{16} = 85_{10} . Each byte (8 bits) is represented by 2 hex digits. First column of hex numbers are a memory address

#+begin_src asm
0000000000001139 <main>:
    1139:	55                   	push   %rbp
    113a:	48 89 e5             	mov    %rsp,%rbp
    113d:	48 83 ec 10          	sub    $0x10,%rsp
    1141:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    1148:	eb 13                	jmp    115d <main+0x24>
    114a:	48 8d 05 b3 0e 00 00 	lea    0xeb3(%rip),%rax        # 2004 <_IO_stdin_used+0x4>
    1151:	48 89 c7             	mov    %rax,%rdi
    1154:	e8 d7 fe ff ff       	call   1030 <puts@plt>
    1159:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    115d:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)
    1161:	7e e7                	jle    114a <main+0x11>
    1163:	b8 00 00 00 00       	mov    $0x0,%eax
    1168:	c9                   	leave
    1169:	c3                   	ret
#+end_src


* assembly syntax
:PROPERTIES:
:NOTER_PAGE: 36
:END:

by default ~objdump~ uses AT&T assembly syntax. This can be changed to intel syntax using ~-M intel~ flag. This outputs:
#+begin_src asm
0000000000001139 <main>:
    1139:	55                   	push   rbp
    113a:	48 89 e5             	mov    rbp,rsp
    113d:	48 83 ec 10          	sub    rsp,0x10
    1141:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    1148:	eb 13                	jmp    115d <main+0x24>
    114a:	48 8d 05 b3 0e 00 00 	lea    rax,[rip+0xeb3]        # 2004 <_IO_stdin_used+0x4>
    1151:	48 89 c7             	mov    rdi,rax
    1154:	e8 d7 fe ff ff       	call   1030 <puts@plt>
    1159:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
    115d:	83 7d fc 09          	cmp    DWORD PTR [rbp-0x4],0x9
    1161:	7e e7                	jle    114a <main+0x11>
    1163:	b8 00 00 00 00       	mov    eax,0x0
    1168:	c9                   	leave
    1169:	c3                   	ret
#+end_src

default assembly syntax can be set by issuing the command ~set dis intel~ in gdb or putting it in .gdbinit

* registers
:PROPERTIES:
:NOTER_PAGE: 38
:END:

~registers~ are fast-access memory locations on the processor. They store information as it is processed.


Registers in 32 bit processors are:
#+begin_src asm
eax            0x5655617d          1448436093
ecx            0xffffc540          -15040
edx            0xffffc560          -15008
ebx            0xf7f7be2c          -134758868
esp            0xffffc520          0xffffc520
ebp            0xffffc528          0xffffc528
esi            0xffffc5fc          -14852
edi            0xf7ffcb60          -134231200
eip            0x5655618c          0x5655618c <main+15>
eflags         0x286               [ PF SF IF ]
cs             0x23                35
ss             0x2b                43
ds             0x2b                43
es             0x2b                43
fs             0x0                 0
gs             0x63                99
#+end_src


And in 64 bit:
#+begin_src asm
rax            0x555555555139      93824992235833
rbx            0x7fffffffd3c8      140737488344008
rcx            0x555555557dd8      93824992247256
rdx            0x7fffffffd3d8      140737488344024
rsi            0x7fffffffd3c8      140737488344008
rdi            0x1                 1
rbp            0x7fffffffd2a0      0x7fffffffd2a0
rsp            0x7fffffffd2a0      0x7fffffffd2a0
r8             0x0                 0
r9             0x7ffff7fcb200      140737353921024
r10            0x7fffffffcfd0      140737488342992
r11            0x203               515
r12            0x1                 1
r13            0x0                 0
r14            0x7ffff7ffd000      140737354125312
r15            0x555555557dd8      93824992247256
rip            0x55555555513d      0x55555555513d <main+4>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
fs_base        0x7ffff7d8d740      140737351571264
gs_base        0x0                 0
#+end_src

** Register types

*** 32 bit

First 4 registers (eax, ecx, edx, ebx):
- eax - accumulator
- ecx - counter
- edx - data
- ebx - base

They are mostly used as "variables" for the processor during machine code execution.

Second 4 (esp, ebp, esi, edi)
- esp - stack pointer - stores
- ebp - base pointer
- esi - source index
- edi - destination index

* intel assembly syntax
:PROPERTIES:
:NOTER_PAGE: 39
:END:


Operations in ~intel~ assembly generally follow this style

#+begin_src asm
operation <destination>, <source>
#+end_src

Both operation and destination can be a register, a memory address or a value. For example to move the value from esp to ebp and then substract 8 from esp the assembly is:

#+begin_src asm
mov ebp,esp
sub esp,0x8
#+end_src
