:PROPERTIES:
:ID:       73324116-11e5-4d6c-aaa4-9dd9c8124cda
:END:
#+title: nand2tetris
#+filetags: :tycs:nand2tetris:
#+export_file_name: nand2tetris_book



* :noexport:toc:
- [[#notes-by-chapter][notes by chapter]]
  - [[#hardware][Hardware]]

* notes by chapter
** Hardware
- abstraction vs implementation
- plan for part 1
  + build a NAND logic gate using elementary logic gates
  + design an Arithmetic Logic Unit
  + design a memory device
  + symbolic and binary forms of a low level machine language
  + use ALU and memory to build a CPU and RAM
  + build an assembler that translates symbolic low-level machine language into executable code

*** Boolean logic
**** Boolean expressions

#+name: Boolean function table
#+caption: truth table and functional definitions of a boolean function
| x y z | f(x,y,z) = (x OR y) AND NOT z |
|-------+-------------------------------|
| 0 0 0 | 0                             |
| 0 0 1 | 0                             |
| 0 1 0 | 1                             |
| 0 1 1 | 0                             |
| 1 0 0 | 1                             |
| 1 0 1 | 0                             |
| 1 1 0 | 1                             |
| 1 1 1 | 0                             |
**** Logic gates

- gate :: a physical device that implements a single boolean function

Since basic boolean operators are binary, multiple gates can be composed to create a *composite* gate that takes more arguments:

#+name: composite_gate
#+begin_example
f(a,b,c) = (a AND b) AND c
#+end_example


- *internal* and *external* view of the gate :: an external view is a view of the abstract boolean function the gate represents (set of input and output pairs), while an internal view concerns itself with the actual implementation of the function.

- logic gate interface :: a description of a logic gate in terms of a function it is performing; described by an external view of the gate.

- TODO: logic gate implementation ::


- logic gate design :: give the interface of the gate, find an efficient implementation as a composite gate of already implemented gates.


**** Hardware construction


#+begin_src nand2tetris
CHIP Xor {
        IN a, b;
	OUT out;
	PARTS:
	Not (in=a, out=nota);
	Not (in=b, out=notb);
	And (a=a,    b=notb, out=w1);
	And (a=nota, b=b,    out=w2);
	Or (a=w1,    b=w2,   out=out);
}
#+end_src


#+begin_src nand2tetris
load Xor.hdl,
output-list a, b, out;
set a 0, set b 0,
eval, output;
#+end_src
